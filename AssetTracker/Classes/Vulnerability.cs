using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Classes.Assets;

namespace Classes
{
    public struct Vulnerability
    {
        public enum Severity { NONE, LOW, MEDIUM, HIGH, CRITICAL };
        public string Id { get; set; }
        public string Published { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
        public Severity Severity_ { get; set; }

        public Vulnerability(string id, string published, string name, string url, string severityString)
        {
            Id = id;
            Published = published;
            Name = name;
            Url = url;
            Enum.TryParse(severityString, out Severity severity);
            Severity_ = severity;
        }

        public static string GetCPEName(List<string> keywords)
        {
            string keywordsString = String.Join("%20", keywords);
            keywordsString = keywordsString.Replace(" ", "%20");
            string URL = "https://services.nvd.nist.gov/rest/json/cpes/2.0";
            string urlParameters = "?keywordSearch=" + keywordsString;

            HttpClient client = new()
            {
                BaseAddress = new Uri(URL)
            };

            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Add("apiKey", "ab8decac-6b46-4e06-876b-873ea2634656");
            HttpResponseMessage response;

            int count = 0;
            while (count < 3)
            {
                count++;
                try
                {
                    response = client.GetAsync(urlParameters).Result;

                    if (response.IsSuccessStatusCode)
                    {
                        var dataObjects = response.Content.ReadAsStringAsync().Result;
                        var object_ = JObject.Parse(dataObjects);
                        return object_["products"][0]["cpe"]["cpeName"].ToString();
                    }
                    else
                    {
                        Thread.Sleep(6000);
                        continue;
                    }
                }
                catch (Newtonsoft.Json.JsonReaderException)
                {
                    continue;
                }
            }
            return "";
        }

        public static List<Vulnerability> CheckOperatingSystem(SoftwareAsset softwareAsset)
        {
            List<Vulnerability> vulnerabilities1 = new();

            string manufacturerFirstWord = Regex.Replace(softwareAsset.Manufacturer.ToString().Split()[0], @"[^0-9a-zA-Z\ ]+", "").ToLower();
            string architecture;
            if (softwareAsset.Architecture == "64-bit")
                architecture = "x64";
            else
                architecture = "x86";

            string URL = "https://services.nvd.nist.gov/rest/json/cves/2.0";
            string pubStartDate = DateTime.Now.AddMonths(-3).ToString("yyyy-MM-ddTHH:mm:ss.fff");
            string pubEndDate = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fff");

            List<string> keywords = new List<string>
            {
                manufacturerFirstWord,
                softwareAsset.Version,
                architecture
            };

            string cpeName = GetCPEName(keywords);
            string cvssV3Severity = "HIGH";
            string resultsPerPage = "3";

            string urlParameters = String.Format("?cpeName={0}&cvssV3Severity={1}&resultsPerPage={2}&pubStartDate={3}&pubEndDate={4}", cpeName, cvssV3Severity, resultsPerPage, pubStartDate, pubEndDate);

            HttpClient client = new()
            {
                BaseAddress = new Uri(URL)
            };

            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Add("apiKey", "ab8decac-6b46-4e06-876b-873ea2634656");

            HttpResponseMessage response;
            int count = 0;
            while (count < 3)
            {
                count++;
                try
                {
                    response = client.GetAsync(urlParameters).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        var dataObjects = response.Content.ReadAsStringAsync().Result;
                        var object_ = JObject.Parse(dataObjects);
                        var vulnerabilities = object_["vulnerabilities"];
                        foreach (var vulnerability in vulnerabilities)
                        {
                            string vulnerabilityName = vulnerability["cve"]["descriptions"][0]["value"].ToString();
                            string url = vulnerability["cve"]["references"][0]["url"].ToString();
                            string id = vulnerability["cve"]["id"].ToString();
                            string published = vulnerability["cve"]["published"].ToString();
                            string severity = vulnerability["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseSeverity"].ToString();

                            Vulnerability vulnerability1 = new(id, published, vulnerabilityName, url, severity);
                            vulnerabilities1.Add(vulnerability1);
                        }
                    }
                    else
                    {
                        Thread.Sleep(6000);
                        continue;
                    }
                    client.Dispose();

                    return vulnerabilities1;
                }
                catch (Newtonsoft.Json.JsonReaderException)
                {
                    continue;
                }
            }
            return new List<Vulnerability>();
        }
    }
}
